<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Sketch Metrics</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
      :root{ --bg:#0b0e14; --fg:#e6f1ff; --card:rgba(255,255,255,.05); --line:rgba(255,255,255,.12); --accent:#9ad1ff; }
      html,body{margin:0;height:100%;background:var(--bg);color:var(--fg);font-family:system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif}
      .wrap{padding:14px}
      .card{background:var(--card);border:1px solid var(--line);border-radius:12px}
      .card-header{border-bottom:1px solid var(--line);background:transparent}
      iframe{width:100%;min-height:320px;border:1px solid var(--line);border-radius:10px;background:#05070a}
      pre{white-space:pre-wrap}
    </style>
  </head>
  <body>
    <div class="wrap">
      <div class="d-flex align-items-center gap-2 mb-3">
        <h1 class="fs-5 m-0">Metrics</h1>
        <a class="btn btn-sm btn-outline-light ms-auto" href="/">Playground</a>
        <a class="btn btn-sm btn-outline-light" href="/artbook">Art Book</a>
      </div>
      <div class="row g-3">
        <div class="col-lg-7">
          <div class="card h-100">
            <div class="card-header">Render</div>
            <div class="card-body">
              <iframe id="frame"></iframe>
              <div class="mt-2 small text-muted">Seed and traits injected for deterministic runs.</div>
            </div>
          </div>
        </div>
        <div class="col-lg-5">
          <div class="card mb-3">
            <div class="card-header d-flex align-items-center">Runtime <button class="btn btn-sm btn-outline-info ms-auto" id="export">Export Report</button></div>
            <div class="card-body small">
              <div>FPS: <span id="fps">—</span></div>
              <div>Frames (3s): <span id="frames">—</span></div>
              <div>DOM nodes: <span id="dom">—</span></div>
              <div>JS size: <span id="jssize">—</span> bytes</div>
              <div>CSS size: <span id="csssize">—</span> bytes</div>
              <div>HTML size: <span id="htmlsize">—</span> bytes</div>
              <div>Code redundancy: <span id="redund">—</span></div>
              <div>Cypher (SHA-256): <span id="sha">—</span></div>
              <div>Paint: <span id="paint">—</span></div>
              <div>Long Tasks: <span id="lt">—</span></div>
            </div>
          </div>
          <div class="card mb-3">
            <div class="card-header d-flex align-items-center">Error Rules <button id="applyRules" class="btn btn-sm btn-outline-info ms-auto">Apply</button></div>
            <div class="card-body">
              <textarea id="rules" class="form-control form-control-sm" rows="8">{}</textarea>
              <pre id="ruleOut" class="small mt-2">—</pre>
            </div>
          </div>
          <div class="card">
            <div class="card-header">Palette</div>
            <div class="card-body small">
              <div id="sw" class="d-flex gap-2 flex-wrap mb-2"></div>
              <pre id="pal" class="small">—</pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    <script>
      const SKETCH = <%- JSON.stringify(sketch) %>;
      const IFRAME_TEMPLATE = <%- JSON.stringify(iframeTemplate) %>;
      function seedPreamble(seed){
        const pre = `(function(){function cyrb128(str){let h1=1779033703,h2=3144134277,h3=1013904242,h4=2773480762;for(let i=0,k;i<str.length;i++){k=str.charCodeAt(i);h1=h2^Math.imul(h1^k,597399067);h2=h3^Math.imul(h2^k,2869860233);h3=h4^Math.imul(h3^k,951274213);h4=h1^Math.imul(h4^k,2716044179);}h1=Math.imul(h3^(h1>>>18),597399067);h2=Math.imul(h4^(h2>>>22),2869860233);h3=Math.imul(h1^(h3>>>17),951274213);h4=Math.imul(h2^(h4>>>19),2716044179);return [(h1^h2^h3^h4)>>>0,(h2^h1)>>>0,(h3^h1)>>>0,(h4^h1)>>>0];}function sfc32(a,b,c,d){return function(){a>>>=0;b>>>=0;c>>>=0;d>>>=0;let t=(a+b)|0;a=b^(b>>>9);b=(c+(c<<3))|0;c=((c<<21)|(c>>>11)) + (t=(t+(d=(d+1)|0))|0) | 0;return (t>>>0)/4294967296;}};var __SEED__=%SEED%;window.SPECTRA_SEED=__SEED__;window.SPECTRA_RANDOM=sfc32(...cyrb128(__SEED__));})();`;
        return pre.replace('%SEED%', JSON.stringify(seed||''));
      }
      function traitsJS(attrs){ const t = attrs && attrs.traits ? attrs.traits : null; return t ? ('\nwindow.$generativeTraits = ' + JSON.stringify(t) + ';\n') : '' }
      function build(){
        const js = seedPreamble(SKETCH.seed) + traitsJS(SKETCH.attrs) + (SKETCH.javascript||'');
        return IFRAME_TEMPLATE.replace('___FIDDLER__HTML___', SKETCH.html||'').replace('___FIDDLER__STYLES___', SKETCH.css||'').replace('___FIDDLER__JAVASCRIPT___', js||'');
      }
      function digest(str){ const enc = new TextEncoder(); const data = enc.encode(str); return crypto.subtle.digest('SHA-256', data).then(buf=> Array.from(new Uint8Array(buf)).map(b=>b.toString(16).padStart(2,'0')).join('') ); }
      const REPORT = { frames:0, fps:0, dom:0, sizes:{}, sha:null, paint:[], longtasks:[] };
      async function measure(){
        const iframe = document.getElementById('frame');
        const doc = build();
        iframe.src = 'data:text/html;charset=utf-8,' + encodeURIComponent(doc);
        let frames = 0; const start = performance.now();
        const stopAt = start + 3000;
        function tick(){ frames++; if (performance.now() < stopAt) requestAnimationFrame(tick); }
        requestAnimationFrame(tick);
        setTimeout(()=>{
          const fps = (frames/3);
          REPORT.fps = +fps.toFixed(2); REPORT.frames = frames;
          document.getElementById('fps').textContent = REPORT.fps.toFixed(2);
          document.getElementById('frames').textContent = REPORT.frames;
          REPORT.sizes = { js:(SKETCH.javascript||'').length, css:(SKETCH.css||'').length, html:(SKETCH.html||'').length };
          document.getElementById('jssize').textContent = REPORT.sizes.js;
          document.getElementById('csssize').textContent = REPORT.sizes.css;
          document.getElementById('htmlsize').textContent = REPORT.sizes.html;
          digest((SKETCH.html||'')+(SKETCH.css||'')+(SKETCH.javascript||''))
            .then(h=> { REPORT.sha=h; document.getElementById('sha').textContent = h; });
          try{ const idoc = iframe.contentDocument; const n = idoc.getElementsByTagName('*').length; REPORT.dom=n; document.getElementById('dom').textContent = n; }catch{ document.getElementById('dom').textContent = '—'; }
        }, 3100);
      }
      async function loadRules(){
        try{ const r = await fetch('/rules.json'); const j = await r.json(); document.getElementById('rules').value = JSON.stringify(j, null, 2);}catch{ document.getElementById('rules').value = '{"regex":[]}' }
      }
      function applyRules(){
        try{
          const cfg = JSON.parse(document.getElementById('rules').value||'{}');
          const src = (SKETCH.html||'')+'\n'+(SKETCH.css||'')+'\n'+(SKETCH.javascript||'');
          const out = [];
          for (const r of (cfg.regex||[])){
            try{ const re = new RegExp(r.pattern, 'gm'); if (re.test(src)) out.push({ id:r.id, message:r.message }); }catch{}
          }
          document.getElementById('ruleOut').textContent = out.length? JSON.stringify(out, null, 2) : 'No issues found.';
        }catch(e){ document.getElementById('ruleOut').textContent = 'Invalid rules JSON'; }
      }
      function renderPalette(){
        const pal = (SKETCH.attrs && SKETCH.attrs.palette) ? SKETCH.attrs.palette : null;
        const sw = document.getElementById('sw'); const pre = document.getElementById('pal');
        if (!pal || !pal.colors || !pal.colors.length) { pre.textContent = '—'; return; }
        sw.innerHTML=''; for (const h of pal.colors){ const d=document.createElement('div'); d.style.width='24px'; d.style.height='16px'; d.style.border='1px solid #243246'; d.style.borderRadius='6px'; d.style.background=h; d.title=h; sw.appendChild(d); }
        pre.textContent = JSON.stringify(pal.metrics || {}, null, 2);
      }
      function startObservers(){
        try{
          const po = new PerformanceObserver((list)=>{ for (const e of list.getEntries()){ if (e.entryType==='paint'){ REPORT.paint.push({ name:e.name, startTime:+e.startTime.toFixed(2) }); } else if (e.entryType==='longtask') { REPORT.longtasks.push({ startTime:+e.startTime.toFixed(2), duration:+e.duration.toFixed(2) }); } } document.getElementById('paint').textContent = REPORT.paint.map(p=>p.name+':'+p.startTime).join(', ')||'—'; document.getElementById('lt').textContent = REPORT.longtasks.length; });
          po.observe({ entryTypes: ['paint','longtask'] });
        }catch(e){}
      }
      function exportReport(){ const a = document.createElement('a'); const blob = new Blob([JSON.stringify({ sketchId: SKETCH._id, metrics: REPORT }, null, 2)], {type:'application/json'}); a.href = URL.createObjectURL(blob); a.download = 'metrics-'+SKETCH._id+'.json'; a.click(); setTimeout(()=> URL.revokeObjectURL(a.href), 1000); }
      window.addEventListener('DOMContentLoaded', ()=>{ measure(); loadRules(); renderPalette(); startObservers(); document.getElementById('applyRules').addEventListener('click', applyRules); document.getElementById('export').addEventListener('click', exportReport); });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  </body>
  </html>
